set_api_key(Sys.getenv("DATA_GOV_API_KEY"))
Sys.getenv("DATA_GOV_API_KEY")
Sys.getenv("DATA_GOV_API_KEY")
Sys.getenv("DATA_GOV_API_KEY")
knitr::opts_chunk$set(echo = TRUE)
set_api_key(Sys.getenv("DATA_GOV_API_KEY"))
library(fbi)
set_api_key(Sys.getenv("DATA_GOV_API_KEY"))
agencies <- fbi_api_agencies
regions
get_estimated_crime("CA")
?get_estimated_crime()
get_estimated_crime("CA", get_api_key())
get_estimated_crime("NY", get_api_key())
ny <- get_estimated_crime("NY")
ny <- get_estimated_crime()
get_nibrs_offense(ori = "DE0010100")
df <- get_nibrs_offense(ori = "DE0010100")
View(df)
View(df)
df[1]
df[[1]]
df[[2]]
df[[3]]
get_nibrs_offense(ori = "DE0010100")
list_nibrs_offenses()
DE0010100 <- get_nibrs_offense(ori = "DE0010100")
DE0010100[1]
DE0010100[2]
DE0010100[3]
DE0010100[4]
DE0010100[5]
DE0010100[6]
DE0010100[7]
DE0010100$content
DE0010100$offense
DE0010100$all_headers
get_nibrs_offense(
key = get_api_key(),
offense = "all",
variable = "count",
ori = NULL,
region = NULL,
state_abb = NULL
)
unique(agencies$agency_type_name)
DE0010100$request
AK0010100 <- get_nibrs_offense(ori = "AK0010100")
AK0010100$request
AK0010100$status_code
AK0010100 <- get_nibrs_offense(ori = "AK0010100", key = get_api_key())
AK0010100$status_code
get_api_key()
install_github("SUN-Wenjun/fbicrime")
devtools::install_github("SUN-Wenjun/fbicrime")
Sys.getenv('DATA_GOV_API_KEY')
library(fbicrime)
set_fbi_crime_api_key(Sys.getenv('DATA_GOV_API_KEY'))
count_offense(offense = 'larceny', level = 'agencies', level_detail = 'MA0010100')
summarize_offender(offense = c('burglary','arson'), level = 'regions', level_detail = c('Northeast','South'), variable = 'sex')
summarize_arrest(by_offense_type = TRUE, offense = c('aggravated-assault','rape'), variable = 'race', since = 2010, until = 2011)
?count_offense
count_offense(offense = 'burglary')
detach("package:fbi", unload = TRUE)
install.packages("tidycensus")
Sys.getenv()
Sys.setenv()
Sys.setenv()
usethis::edit_r_environ()
Sys.getenv("CENSUS_API_KEY")
library(tidycensus)
library(tidyverse)
census_api_key(Sys.getenv("CENSUS_API_KEY"))
install.packages("sf")
census_api_key(Sys.getenv("CENSUS_API_KEY"))
library(tidycensus)
census_api_key(Sys.getenv("CENSUS_API_KEY"))
?get_acs
# Get poverty data for metropolitan areas
poverty_data <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "S1901",
survey = "acs1",
year = 2022)
Sys.getenv("CENSUS_API_KEY")
key = Sys.getenv("CENSUS_API_KEY")
census_api_key(key)
# Get poverty data for metropolitan areas
poverty_data <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "S1901",
survey = "acs1",
year = 2022)
# Get poverty data for metropolitan areas
poverty_data <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "S1901",
survey = "acs1",
year = 2022)
source("~/Documents/GitHub/real-estate-project/scripts/census_poverty_data.R", echo=TRUE)
usethis::edit_r_environ()
key
census_api_key(key)
source("~/Documents/GitHub/real-estate-project/scripts/census_poverty_data.R", echo=TRUE)
# Get poverty data for metropolitan areas
poverty_data <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "S1901",
survey = "acs1",
year = 2022)
View(poverty_data)
poverty_data$variable
# Get poverty data for metropolitan areas
poverty_data <- get_acs(geography = "metropolitan statistical area",
table = "S1901",
survey = "acs1",
year = 2022)
unique(poverty_data$variable)
# Create a mapping table
code_mapping <- c(
"S1901_C01_001" = "Total",
"S1901_C01_002" = "Less than $10,000",
"S1901_C01_003" = "$10,000 to $14,999",
"S1901_C01_004" = "$15,000 to $24,999",
"S1901_C01_005" = "$25,000 to $34,999",
"S1901_C01_006" = "$35,000 to $49,999",
"S1901_C01_007" = "$50,000 to $74,999",
"S1901_C01_008" = "$75,000 to $99,999",
"S1901_C01_009" = "$100,000 to $149,999",
"S1901_C01_010" = "$150,000 to $199,999",
"S1901_C01_011" = "$200,000 or more",
"S1901_C01_012" = "Median income (dollars)",
"S1901_C01_013" = "Mean income (dollars)",
"S1901_C01_014" = "Household income in the past 12 months",
"S1901_C01_015" = "Family income in the past 12 months",
"S1901_C01_016" = "Nonfamily income in the past 12 months"
)
# Apply the mapping to your variable
poverty_data$label <- code_mapping[poverty_data$variable]
# Check the result
head(poverty_data[, c("variable", "label")])
# Check the result
head(poverty_data[, c("variable", "label")], 16)
# keep the last three digits of 'variable' in poverty_data
poverty_data$variable <- substr(poverty_data$variable, start = 6, stop = 8)
# keep the last three digits of 'variable' in poverty_data
poverty_data$variable <- substr(poverty_data$variable, start = 11, stop = 13)
# Get poverty data for metropolitan areas
poverty_data <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "S1901",
survey = "acs1",
year = 2022)
View(substr(poverty_data$variable, start = 11, stop = 13))
# keep the last three digits of 'variable' in poverty_data
poverty_data$variable <- substr(poverty_data$variable, start = 11, stop = 13)
# Apply the mapping to your variable
poverty_data$label <- code_mapping[poverty_data$variable]
# Check the result
head(poverty_data[, c("variable", "label")], 16)
# Create a mapping table
code_mapping <- c(
"001" = "Total",
"002" = "Less than $10,000",
"003" = "$10,000 to $14,999",
"004" = "$15,000 to $24,999",
"005" = "$25,000 to $34,999",
"006" = "$35,000 to $49,999",
"007" = "$50,000 to $74,999",
"008" = "$75,000 to $99,999",
"009" = "$100,000 to $149,999",
"010" = "$150,000 to $199,999",
"011" = "$200,000 or more",
"012" = "Median income (dollars)",
"013" = "Mean income (dollars)",
"014" = "Household income in the past 12 months",
"015" = "Family income in the past 12 months",
"016" = "Nonfamily income in the past 12 months"
)
# Apply the mapping to your variable
poverty_data$label <- code_mapping[poverty_data$variable]
View(poverty_data %>%
filter(str_detect(NAME, "Micro")))
poverty_data$variable <- NULL
# remove rows with 'Micro' in NAME column
poverty_wo_micro <- poverty_data %>%
filter(!str_detect(NAME, "Micro"))
View(poverty_wo_micro)
?str_detect
# for each value in NAME column, keep the first 13 rows
poverty <- poverty_wo_micro %>%
group_by(NAME) %>%
slice(1:13) %>%
ungroup()
View(poverty)
# for each value in NAME column, sum up the values in 'estimate' column
# from row 2 to row 11
poverty_rate <- poverty %>%
group_by(NAME) %>%
mutate(total = sum(estimate[2:11])) %>%
ungroup()
View(poverty_rate)
# for each value in NAME column, sum up the values in 'estimate' column
# from row 2 to row 11
poverty_rate <- poverty %>%
group_by(NAME) %>%
mutate(total = sum(estimate[2:5])) %>%
ungroup()
# for each value in NAME column, sum up the values in 'estimate' column
# from row 2 to row 11
poverty_rate <- poverty %>%
group_by(NAME) %>%
mutate(total = sum(estimate[2:5]))
# for each value in NAME column, sum up the values in 'estimate' column
# from row 2 to row 11
poverty_rate <- poverty %>%
group_by(NAME) %>%
mutate(total = sum(estimate[2:5]))
# modify the code right above by aggregating the data like in sql
poverty_rate <- poverty %>%
group_by(NAME) %>%
summarise(total = sum(estimate[2:5]))
# modify the code right above by aggregating the data like in sql
poverty_rate <- poverty %>%
group_by(NAME) %>%
summarise(poverty_rate = sum(estimate[2:5]))
# export poverty_rate to a csv file
write_csv(poverty_rate, "../cleansed data/poverty_rate.csv")
# export poverty_rate to a csv file
write_csv(poverty_rate, "./cleansed data/poverty_rate.csv")
install.packages("censusapi")
source("~/GitHub/real-estate-project/scripts/housing_vacancies.R", echo=TRUE)
View(apis)
?getCensus
hvs_vars <- listCensusMetadata(
name = "timeseries/eits/hv",
type = "variables")
# See the full list of variables
hvs_vars$name
head(hvs_vars)
listCensusMetadata(
name = "timeseries/eits/hv",
type = "geography")
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = hvs_vars$name,
region = "us",
time = 2021)
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = hvs_vars$name,
region = "us",
time = 2021,
key = key)
key
usethis::edit_r_environ()
Sys.getenv("CENSUS_API_KEY")
source("~/GitHub/real-estate-project/scripts/housing_vacancies.R", echo=TRUE)
hvs_vars$name[1:10]
hvs_vars$name
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = hvs_vars$name[1:10],
region = "us",
time = 2021,
key = key)
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = hvs_vars$name[2:10],
region = "us",
time = 2021,
key = key)
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = c("program_code", "category_code", "time_slot_date"),
region = "us",
time = 2021,
key = key)
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = c("category_code", "cell_value", "data_type_code",
"seasonally_adj", "time", "time_slot_id"),
region = "us",
time = 2021,
key = key)
# See the full list of variables
hvs_vars$name
hvs_state <- getCensus(
name = "timeseries/eits/hv",
vars = c("category_code", "cell_value", "data_type_code",
"seasonally_adj", "time_slot_id"),
region = "us",
time = 2021,
key = key)
head(hvs_state)
View(hvs_state)
source("~/GitHub/real-estate-project/scripts/housing_vacancies.R", echo=TRUE)
# Get poverty data for metropolitan areas
vacancy <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "DP04",
survey = "acs5",
year = 2022)
View(vacancy)
# Get poverty data for metropolitan areas
vacancy_rates <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "DP04",
survey = "acs5",
year = 2022,
variables = "DP04_0005E")
View(vacancy)
?get_acs
vacancy_state <- get_acs(geography = "state",
table = "DP04",
survey = "acs5",
year = 2022)
View(vacancy_state)
str(vacancy_state)
View(vacancy_state |>
group_by(NAME) |>
filter(variable = "DP04_0005"))
View(vacancy_state |>
filter(variable = "DP04_0005"))
library(tidyverse)
# for each value in NAME column, get the estimate with variable = DP04_0005
vacancy_s <- vacancy_state |>
filter(variable = "DP04_0005")
View(vacancy_state |>
filter(variable == "DP04_0005"))
# for each value in NAME column, get the estimate with variable = DP04_0005
vacancy_rate_state <- vacancy_state |>
filter(variable == "DP04_0005")
# Get vacancy rates for metropolitan areas
vacancy_metro <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "DP04",
survey = "acs5",
year = 2022,
variables = "DP04_0005E")
# Get vacancy rates for metropolitan areas
vacancy_metro <- get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "DP04",
survey = "acs5",
year = 2022)
vacancy_rate_metro <- vacancy_metro |>
filter(variable == "DP04_0005")
View(vacancy_rate_metro)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_metro <- vacancy_metro |>
filter(variable == "DP04_0005") |>
filter(!str_detect(NAME, "Micro")) |>
filter(!str_detect(NAME, "Micro"))
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_metro <- vacancy_metro |>
filter(variable == "DP04_0005") |>
filter(!str_detect(NAME, "Micro")) |>
filter(!str_detect(NAME, "Micro")) |>
select(-variable)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_state <- vacancy_state |>
filter(variable == "DP04_0005") |>
select(-variable)
View(vacancy_state)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_state <- vacancy_state |>
filter(variable == "DP04_0005") |>
select(-variable)
View(vacancy_rate_state)
?rename
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_metro <- vacancy_metro |>
filter(variable == "DP04_0005") |>
filter(!str_detect(NAME, "Micro")) |>
filter(!str_detect(NAME, "Micro")) |>
rename(estimate = vacancy_rate) |>
select(-variable)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_metro <- vacancy_metro |>
filter(variable == "DP04_0005") |>
filter(!str_detect(NAME, "Micro")) |>
filter(!str_detect(NAME, "Micro")) |>
rename(vacancy_rate = estimate) |>
select(-variable)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
vacancy_rate_state <- vacancy_state |>
filter(variable == "DP04_0005") |>
rename(vacancy_rate = estimate) |>
select(-variable)
# export to csv's
write_csv(vacancy_rate_state, "./cleansed data/acs5_1822_vacancy_rate_state.csv")
write_csv(vacancy_rate_metro, "./cleansed data/acs5_1822_vacancy_rate_metro.csv")
library(purrr)
years <- 2017:2022
# Use map to fetch data for each year
vacancy_data_list <- map(years, ~get_acs(geography = "state",
table = "DP04",
survey = "acs1",
year = .x))
View(vacancy_combined)
years <- c(2017,2018,2019,2021,2022)
# Use map to fetch data for each year
vacancy_data_list <- map(years, ~get_acs(geography = "state",
table = "DP04",
survey = "acs1",
year = .x))
# Combine the list into a single data frame
vacancy_combined <- bind_rows(vacancy_data_list, .id = "year")
View(vacancy_combined)
colnames(vacancy_combined)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
acs1_vacancy_rate <- vacancy_combined |>
filter(variable == "DP04_0005") |>
rename(vacancy_rate = estimate) |>
select(year, NAME, estimate)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
acs1_vacancy_rate <- vacancy_combined |>
filter(variable == "DP04_0005") |>
rename(vacancy_rate = estimate) |>
select(year, NAME, vacancy_rate)
View(acs1_vacancy_rate)
head(acs1_vacancy_rate)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
acs1_vacancy_rate <- vacancy_combined |>
filter(variable == "DP04_0005") |>
rename(vacancy_rate = estimate) |>
select(year, NAME, vacancy_rate) |>
mutate(
year = case_when(
year == "1" ~ "2017",
year == "2" ~ "2018",
year == "3" ~ "2019",
year == "4" ~ "2020",  # Assuming there's a typo in the question and "2021" is actually "2020"
year == "5" ~ "2021",
year == "6" ~ "2022",
TRUE ~ as.character(year)  # If none of the conditions are met, keep the original value
)
)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
acs1_vacancy_rate <- vacancy_combined |>
filter(variable == "DP04_0005") |>
rename(vacancy_rate = estimate) |>
select(year, NAME, vacancy_rate) |>
mutate(
year = case_when(
year == "1" ~ "2017",
year == "2" ~ "2018",
year == "3" ~ "2019",
year == "4" ~ "2021",  # Assuming there's a typo in the question and "2021" is actually "2020"
year == "5" ~ "2022",
TRUE ~ as.character(year)  # If none of the conditions are met, keep the original value
)
)
52*5
write_csv(poverty_rate, "./cleansed data/acs1_vacancy_rate_state.csv")
write_csv(acs1_vacancy_rate, "./cleansed data/acs1_vacancy_rate_state.csv")
library(tidycensus)
library(tidyverse)
key = Sys.getenv("CENSUS_API_KEY")
census_api_key(key, install = TRUE)
library(purrr)
years <- c(2017,2018,2019,2021,2022)
# Use map to fetch data for each year
vacancy_data_list <- map(years, ~get_acs(geography = "metropolitan statistical area/micropolitan statistical area",
table = "DP04",
survey = "acs1",
year = .x))
# Combine the list into a single data frame
vacancy_combined <- bind_rows(vacancy_data_list, .id = "year")
View(vacancy_combined)
# for each value in NAME column, get the vacancy rate with variable = DP04_0005
acs1_vacancy_metro <- vacancy_combined |>
filter(variable == "DP04_0005") |>
filter(!str_detect(NAME, "Micro")) |>
rename(vacancy_rate = estimate) |>
select(year, NAME, vacancy_rate) |>
mutate(
year = case_when(
year == "1" ~ "2017",
year == "2" ~ "2018",
year == "3" ~ "2019",
year == "4" ~ "2021",  # Assuming there's a typo in the question and "2021" is actually "2020"
year == "5" ~ "2022",
TRUE ~ as.character(year)  # If none of the conditions are met, keep the original value
)
)
View(acs1_vacancy_metro)
write_csv(acs1_vacancy_metro, "./cleansed data/acs1_vacancy_rate_metro.csv")
View(acs1_vacancy_metro)
library(devtools)
devtools::install_github("everetr/houser")
library(houser)
?bps_get
# Download annual data for one geography, two years.
bps_get(path = "./raw data", geography = "state", years = c(2017,2018,2019,2021,2022))
# import txt file
housing_permits_2022 <- read.csv('./raw datast2022a')
# import txt file
housing_permits_2022 <- read.csv('./raw datast2022a.txt')
# import txt file
housing_permits_2022 <- read.delim('./raw datast2022a.txt')
View(housing_permits_2022)
?read.delim
# import txt file
housing_permits_2022 <- read.delim('./raw datast2022a.txt', sep = ',')
# import txt file
housing_permits_2022 <- read.csv('./raw datast2022a.txt', sep = ',')
?read_table
# import txt file
housing_permits_2022 <- read_table('./raw datast2022a.txt')
?read.table
# import txt file
housing_permits_2022 <- read.table('./raw datast2022a.txt', header = T, sep = ',')
?clean_bps
?bps_read
# import txt file
housing_permits_2022 <-bps_read('./raw datast2022a.txt')
housing_permits_2021 <- bps_read('./raw datast2021a.txt')
View(housing_permits_2021)
View(housing_permits_2021)
